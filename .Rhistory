plot(abs(result$stat)~result$log2FoldChange, pch=16, cex=0.6, col="gray80", ylim = c(-10,(ceiling(max(abs(result$stat))))), xlim = c(-(ceiling(max(abs(result$log2FoldChange)))),(ceiling(max(abs(result$log2FoldChange))))), xlab="Log2FoldChange", ylab="Absolute Wald Statistic", main="Differentially Expressed Genes [Fibroblast vs. SH_SY5Y]", cex.main=.85)
points(abs(result_up$stat)~result_up$log2FoldChange, pch=16, cex=0.6, col="gray60")
points(abs(result_down$stat)~result_down$log2FoldChange, pch=16, cex=0.6, col="gray60")
abline(h=min(abs(subset(result, pvalue<pval)$stat)), v=c(log2FC,-log2FC), lty=2, col="darkseagreen4")
text(-22,140, (nrow(result_down)), col = "Blue", pos = 4, cex = .85)
text(-22,130, "Down", col = "Blue", pos = 4, cex = .85)
text(-22,120, "regulated", col = "Blue", pos = 4, cex = .85)
text(22,140, (nrow(result_up)), col = "Red", pos = 2, cex = .85)
text(22,130, "Up", col = "Red", pos = 2, cex = .85)
text(22,120, "regulated", col = "Red", pos = 2, cex = .85)
text(0,1, paste((nrow(result_nochange)), " No_change"), col = "Black", pos = 1, cex = .85)
# text(-22,6, (nrow(result_nochange)), col = "Black", pos = 4, cex = .85)
# text(-22,-4, "No_change", col = "Black", pos = 4, cex = .85)
}
# Plotting the volcano plot
# Don't need to return the value
# result required Result
# Subset file and file location are mandatory for this function
volcano_plot_subset(result=Result,
pval=0.05,
log2FC=1.5,
subset_file_location="/Users/madhavmakkena/Desktop/RNAseq_Analysis",
subset_file_name="hist_plot_genes.csv")
#
volcano_plot(result=Result,
pval=0.05,
log2FC=1.5,
subset_file_location="/Users/madhavmakkena/Desktop/RNAseq_Analysis",
subset_file_name="hist_plot_genes.csv")
volcano_plot(result=Result,
pval=0.05,
log2FC=1.5)
volcano_plot <- function(result, pval, log2FC){
result_up<-subset(result, pvalue<=pval & log2FoldChange >= log2FC)
result_down<-subset(result, pvalue<=pval & log2FoldChange <= -log2FC)
result_nochange<-subset(result, (pvalue<=pval & (log2FoldChange >-log2FC &  log2FoldChange < log2FC)) | (pvalue>pval))
plot(abs(result$stat)~result$log2FoldChange, pch=16, cex=0.6, col="gray80", ylim = c(-10,(ceiling(max(abs(result$stat))))), xlim = c(-(ceiling(max(abs(result$log2FoldChange)))),(ceiling(max(abs(result$log2FoldChange))))), xlab="Log2FoldChange", ylab="Absolute Wald Statistic", main="Differentially Expressed Genes [Fibroblast vs. SH_SY5Y]", cex.main=.85)
points(abs(result_up$stat)~result_up$log2FoldChange, pch=16, cex=0.6, col="gray40")
points(abs(result_down$stat)~result_down$log2FoldChange, pch=16, cex=0.6, col="gray40")
abline(h=min(abs(subset(result, pvalue<pval)$stat)), v=c(log2FC,-log2FC), lty=2, col="gray20")
text(-22,140, (nrow(result_down)), col = "Blue", pos = 4, cex = .85)
text(-22,130, "Down", col = "Blue", pos = 4, cex = .85)
text(-22,120, "regulated", col = "Blue", pos = 4, cex = .85)
text(22,140, (nrow(result_up)), col = "Red", pos = 2, cex = .85)
text(22,130, "Up", col = "Red", pos = 2, cex = .85)
text(22,120, "regulated", col = "Red", pos = 2, cex = .85)
text(0,1, paste((nrow(result_nochange)), " No_change"), col = "Black", pos = 1, cex = .85)
# text(-22,6, (nrow(result_nochange)), col = "Black", pos = 4, cex = .85)
# text(-22,-4, "No_change", col = "Black", pos = 4, cex = .85)
}
#' @export
volcano_plot_subset <- function(result, pval, log2FC, subset_file_location, subset_file_name){
setwd(subset_file_location)
subset_genes <- read.csv(subset_file_name, header = F)$V1
result_subset<-subset(result[subset_genes,])
result_up<-subset(result, pvalue<=pval & log2FoldChange >= log2FC)
result_down<-subset(result, pvalue<=pval & log2FoldChange <= -log2FC)
result_nochange<-subset(result, (pvalue<=pval & (log2FoldChange >-log2FC &  log2FoldChange < log2FC)) | (pvalue>pval))
plot(abs(result$stat)~result$log2FoldChange, pch=16, cex=0.6, col="gray80", ylim = c(-10,(ceiling(max(abs(result$stat))))), xlim = c(-(ceiling(max(abs(result$log2FoldChange)))),(ceiling(max(abs(result$log2FoldChange))))), xlab="Log2FoldChange", ylab="Absolute Wald Statistic", main="Differentially Expressed Genes [Fibroblast vs. SH_SY5Y]", cex.main=.85)
points(abs(result_up$stat)~result_up$log2FoldChange, pch=16, cex=0.6, col="gray60")
points(abs(result_down$stat)~result_down$log2FoldChange, pch=16, cex=0.6, col="gray60")
points(abs(result_subset$stat)~result_subset$log2FoldChange, pch=16, cex=0.6, col="darkgreen")
abline(h=min(abs(subset(result, pvalue<pval)$stat)), v=c(log2FC,-log2FC), lty=2, col="darkseagreen4")
text(-22,140, (nrow(result_down)), col = "Blue", pos = 4, cex = .85)
text(-22,130, "Down", col = "Blue", pos = 4, cex = .85)
text(-22,120, "regulated", col = "Blue", pos = 4, cex = .85)
text(22,140, (nrow(result_up)), col = "Red", pos = 2, cex = .85)
text(22,130, "Up", col = "Red", pos = 2, cex = .85)
text(22,120, "regulated", col = "Red", pos = 2, cex = .85)
text(0,1, paste((nrow(result_nochange)), " No_change"), col = "Black", pos = 1, cex = .85)
# text(-22,6, (nrow(result_nochange)), col = "Black", pos = 4, cex = .85)
# text(-22,-4, "No_change", col = "Black", pos = 4, cex = .85)
}
#' @export
volcano_plot <- function(result, pval, log2FC){
result_up<-subset(result, pvalue<=pval & log2FoldChange >= log2FC)
result_down<-subset(result, pvalue<=pval & log2FoldChange <= -log2FC)
result_nochange<-subset(result, (pvalue<=pval & (log2FoldChange >-log2FC &  log2FoldChange < log2FC)) | (pvalue>pval))
plot(abs(result$stat)~result$log2FoldChange, pch=16, cex=0.6, col="gray80", ylim = c(-10,(ceiling(max(abs(result$stat))))), xlim = c(-(ceiling(max(abs(result$log2FoldChange)))),(ceiling(max(abs(result$log2FoldChange))))), xlab="Log2FoldChange", ylab="Absolute Wald Statistic", main="Differentially Expressed Genes [Fibroblast vs. SH_SY5Y]", cex.main=.85)
points(abs(result_up$stat)~result_up$log2FoldChange, pch=16, cex=0.6, col="gray40")
points(abs(result_down$stat)~result_down$log2FoldChange, pch=16, cex=0.6, col="gray40")
abline(h=min(abs(subset(result, pvalue<pval)$stat)), v=c(log2FC,-log2FC), lty=2, col="gray20")
text(-22,140, (nrow(result_down)), col = "Blue", pos = 4, cex = .85)
text(-22,130, "Down", col = "Blue", pos = 4, cex = .85)
text(-22,120, "regulated", col = "Blue", pos = 4, cex = .85)
text(22,140, (nrow(result_up)), col = "Red", pos = 2, cex = .85)
text(22,130, "Up", col = "Red", pos = 2, cex = .85)
text(22,120, "regulated", col = "Red", pos = 2, cex = .85)
text(0,1, paste((nrow(result_nochange)), " No_change"), col = "Black", pos = 1, cex = .85)
# text(-22,6, (nrow(result_nochange)), col = "Black", pos = 4, cex = .85)
# text(-22,-4, "No_change", col = "Black", pos = 4, cex = .85)
}
# Plotting the volcano plot
# Don't need to return the value
# result required Result
# Subset file and file location are mandatory for this function
volcano_plot_subset(result=Result,
pval=0.05,
log2FC=1.5,
subset_file_location="/Users/madhavmakkena/Desktop/RNAseq_Analysis",
subset_file_name="hist_plot_genes.csv")
#' @export
volcano_plot_subset <- function(result, pval, log2FC, subset_file_location, subset_file_name){
setwd(subset_file_location)
subset_genes <- read.csv(subset_file_name, header = F)$V1
result_subset<-subset(result[subset_genes,])
result_up<-subset(result, pvalue<=pval & log2FoldChange >= log2FC)
result_down<-subset(result, pvalue<=pval & log2FoldChange <= -log2FC)
result_nochange<-subset(result, (pvalue<=pval & (log2FoldChange >-log2FC &  log2FoldChange < log2FC)) | (pvalue>pval))
plot(abs(result$stat)~result$log2FoldChange, pch=16, cex=0.6, col="gray80", ylim = c(-10,(ceiling(max(abs(result$stat))))), xlim = c(-(ceiling(max(abs(result$log2FoldChange)))),(ceiling(max(abs(result$log2FoldChange))))), xlab="Log2FoldChange", ylab="Absolute Wald Statistic", main="Differentially Expressed Genes [Fibroblast vs. SH_SY5Y]", cex.main=.85)
points(abs(result_up$stat)~result_up$log2FoldChange, pch=16, cex=0.6, col="gray60")
points(abs(result_down$stat)~result_down$log2FoldChange, pch=16, cex=0.6, col="gray60")
points(abs(result_subset$stat)~result_subset$log2FoldChange, pch=16, cex=0.6, col="darkgreen")
abline(h=min(abs(subset(result, pvalue<pval)$stat)), v=c(log2FC,-log2FC), lty=2, col="darkseagreen4")
text(-22,140, (nrow(result_down)), col = "Blue", pos = 4, cex = .85)
text(-22,130, "Down", col = "Blue", pos = 4, cex = .85)
text(-22,120, "regulated", col = "Blue", pos = 4, cex = .85)
text(22,140, (nrow(result_up)), col = "Red", pos = 2, cex = .85)
text(22,130, "Up", col = "Red", pos = 2, cex = .85)
text(22,120, "regulated", col = "Red", pos = 2, cex = .85)
text(0,1, paste((nrow(result_nochange)), " No_change"), col = "Black", pos = 1, cex = .85)
# text(-22,6, (nrow(result_nochange)), col = "Black", pos = 4, cex = .85)
# text(-22,-4, "No_change", col = "Black", pos = 4, cex = .85)
return(list(result_up=result_up, result_down=result_down, result_nochange=result_nochange))
}
#' @export
volcano_plot <- function(result, pval, log2FC){
result_up<-subset(result, pvalue<=pval & log2FoldChange >= log2FC)
result_down<-subset(result, pvalue<=pval & log2FoldChange <= -log2FC)
result_nochange<-subset(result, (pvalue<=pval & (log2FoldChange >-log2FC &  log2FoldChange < log2FC)) | (pvalue>pval))
plot(abs(result$stat)~result$log2FoldChange, pch=16, cex=0.6, col="gray80", ylim = c(-10,(ceiling(max(abs(result$stat))))), xlim = c(-(ceiling(max(abs(result$log2FoldChange)))),(ceiling(max(abs(result$log2FoldChange))))), xlab="Log2FoldChange", ylab="Absolute Wald Statistic", main="Differentially Expressed Genes [Fibroblast vs. SH_SY5Y]", cex.main=.85)
points(abs(result_up$stat)~result_up$log2FoldChange, pch=16, cex=0.6, col="gray40")
points(abs(result_down$stat)~result_down$log2FoldChange, pch=16, cex=0.6, col="gray40")
abline(h=min(abs(subset(result, pvalue<pval)$stat)), v=c(log2FC,-log2FC), lty=2, col="gray20")
text(-22,140, (nrow(result_down)), col = "Blue", pos = 4, cex = .85)
text(-22,130, "Down", col = "Blue", pos = 4, cex = .85)
text(-22,120, "regulated", col = "Blue", pos = 4, cex = .85)
text(22,140, (nrow(result_up)), col = "Red", pos = 2, cex = .85)
text(22,130, "Up", col = "Red", pos = 2, cex = .85)
text(22,120, "regulated", col = "Red", pos = 2, cex = .85)
text(0,1, paste((nrow(result_nochange)), " No_change"), col = "Black", pos = 1, cex = .85)
# text(-22,6, (nrow(result_nochange)), col = "Black", pos = 4, cex = .85)
# text(-22,-4, "No_change", col = "Black", pos = 4, cex = .85)
return(list(result_up=result_up, result_down=result_down, result_nochange=result_nochange))
}
#' @export
volcano_plot_subset <- function(result, pval, log2FC, subset_file_location, subset_file_name){
setwd(subset_file_location)
subset_genes <- read.csv(subset_file_name, header = F)$V1
result_subset<-subset(result[subset_genes,])
result_up<-subset(result, pvalue<=pval & log2FoldChange >= log2FC)
result_down<-subset(result, pvalue<=pval & log2FoldChange <= -log2FC)
result_nochange<-subset(result, (pvalue<=pval & (log2FoldChange >-log2FC &  log2FoldChange < log2FC)) | (pvalue>pval))
plot(abs(result$stat)~result$log2FoldChange, pch=16, cex=0.6, col="gray80", ylim = c(-10,(ceiling(max(abs(result$stat))))), xlim = c(-(ceiling(max(abs(result$log2FoldChange)))),(ceiling(max(abs(result$log2FoldChange))))), xlab="Log2FoldChange", ylab="Absolute Wald Statistic", main="Differentially Expressed Genes [Fibroblast vs. SH_SY5Y]", cex.main=.85)
points(abs(result_up$stat)~result_up$log2FoldChange, pch=16, cex=0.6, col="gray60")
points(abs(result_down$stat)~result_down$log2FoldChange, pch=16, cex=0.6, col="gray60")
points(abs(result_subset$stat)~result_subset$log2FoldChange, pch=16, cex=0.6, col="darkgreen")
abline(h=min(abs(subset(result, pvalue<pval)$stat)), v=c(log2FC,-log2FC), lty=2, col="darkseagreen4")
text(-22,140, (nrow(result_down)), col = "Blue", pos = 4, cex = .85)
text(-22,130, "Down", col = "Blue", pos = 4, cex = .85)
text(-22,120, "regulated", col = "Blue", pos = 4, cex = .85)
text(22,140, (nrow(result_up)), col = "Red", pos = 2, cex = .85)
text(22,130, "Up", col = "Red", pos = 2, cex = .85)
text(22,120, "regulated", col = "Red", pos = 2, cex = .85)
text(0,1, paste((nrow(result_nochange)), " No_change"), col = "Black", pos = 1, cex = .85)
# text(-22,6, (nrow(result_nochange)), col = "Black", pos = 4, cex = .85)
# text(-22,-4, "No_change", col = "Black", pos = 4, cex = .85)
return(list(result_up=result_up, result_down=result_down, result_nochange=result_nochange))
}
#' @export
volcano_plot <- function(result, pval, log2FC){
result_up<-subset(result, pvalue<=pval & log2FoldChange >= log2FC)
result_down<-subset(result, pvalue<=pval & log2FoldChange <= -log2FC)
result_nochange<-subset(result, (pvalue<=pval & (log2FoldChange >-log2FC &  log2FoldChange < log2FC)) | (pvalue>pval))
plot(abs(result$stat)~result$log2FoldChange, pch=16, cex=0.6, col="gray80", ylim = c(-10,(ceiling(max(abs(result$stat))))), xlim = c(-(ceiling(max(abs(result$log2FoldChange)))),(ceiling(max(abs(result$log2FoldChange))))), xlab="Log2FoldChange", ylab="Absolute Wald Statistic", main="Differentially Expressed Genes [Fibroblast vs. SH_SY5Y]", cex.main=.85)
points(abs(result_up$stat)~result_up$log2FoldChange, pch=16, cex=0.6, col="gray40")
points(abs(result_down$stat)~result_down$log2FoldChange, pch=16, cex=0.6, col="gray40")
abline(h=min(abs(subset(result, pvalue<pval)$stat)), v=c(log2FC,-log2FC), lty=2, col="gray20")
text(-22,140, (nrow(result_down)), col = "Blue", pos = 4, cex = .85)
text(-22,130, "Down", col = "Blue", pos = 4, cex = .85)
text(-22,120, "regulated", col = "Blue", pos = 4, cex = .85)
text(22,140, (nrow(result_up)), col = "Red", pos = 2, cex = .85)
text(22,130, "Up", col = "Red", pos = 2, cex = .85)
text(22,120, "regulated", col = "Red", pos = 2, cex = .85)
text(0,1, paste((nrow(result_nochange)), " No_change"), col = "Black", pos = 1, cex = .85)
# text(-22,6, (nrow(result_nochange)), col = "Black", pos = 4, cex = .85)
# text(-22,-4, "No_change", col = "Black", pos = 4, cex = .85)
return(list(result_up=result_up, result_down=result_down, result_nochange=result_nochange))
}
# Plotting the volcano plot
# result required Result
# Subset file and file location are mandatory for this function
# return the values to DEGs
DEGs <- volcano_plot_subset(result=Result,
pval=0.05,
log2FC=1.5,
subset_file_location="/Users/madhavmakkena/Desktop/RNAseq_Analysis",
subset_file_name="hist_plot_genes.csv")
# If you don't want any subsets use this instead
# DEGs <- volcano_plot(result=Result, pval=0.05, log2FC=1.5)
# to seperate the DEG lists run the following
# Return the result_up to result_up
result_up <- (result_up=DEGs$result_up)
# Return the result_down to result_down
result_down <-(result_down=DEGs$result_down)
# Return the result_nochange to result_nochange
result_nochange <- (result_nochange=DEGs$result_nochange)
# Checking if the totals add up between the DEGs and Result
all (nrow(Result) == (nrow(result_up)+nrow(result_down)+nrow(result_nochange))
# Checking if the totals add up between the DEGs and Result
all (nrow(Result) == (nrow(result_up)+nrow(result_down)+nrow(result_nochange)))
all (nrow(Result) == (nrow(result_up)+nrow(result_down)+nrow(result_nochange)))
# Checking if the totals add up between the DEGs and Result
all (nrow(Result) == (nrow(result_up)+nrow(result_nochange)))
Complete_Data <- merge(Count, Result, by = 0)
View(Complete_Data)
rownames(Complete_Data)=Complete_Data$Row.names
Complete_Data <- subset(Complete_Data, select = -c(Row.names) )
View(Complete_Data)
#' @export
Complete_Data <- function(result, count){
Complete_Data <- merge(count, result, by = 0)
rownames(Complete_Data)=Complete_Data$Row.names
Complete_Data <- subset(Complete_Data, select = -c(Row.names) )
}
rm(Complete_Data)
complete_data <- function(result, count){
Complete_Data <- merge(count, result, by = 0)
rownames(Complete_Data)=Complete_Data$Row.names
Complete_Data <- subset(Complete_Data, select = -c(Row.names) )
}
# Combines the data from Result and Count
# Return complete_data to Complete_Data
Complete_Data <- complete_data(result=Result, count=Count)
View(Complete_Data)
#' @export
complete_data <- function(result, count, result_up, result_down, result_nochange){
Complete_Data <- merge(count, result, by = 0)
rownames(Complete_Data)=Complete_Data$Row.names
Complete_Data <- subset(Complete_Data, select = -c(Row.names))
Up_Data <- Complete_Data[row.names(Complete_Data) %in% row.names(result_up), ]
Down_Data <- Complete_Data[row.names(Complete_Data) %in% row.names(result_down), ]
Nochange_Data <- Complete_Data[row.names(Complete_Data) %in% row.names(result_nochange), ]
}
#' @export
complete_data <- function(result, count, result_up, result_down, result_nochange){
Complete_Data <- merge(count, result, by = 0)
rownames(Complete_Data)=Complete_Data$Row.names
Complete_Data <- subset(Complete_Data, select = -c(Row.names))
Up_Data <- Complete_Data[row.names(Complete_Data) %in% row.names(result_up), ]
Down_Data <- Complete_Data[row.names(Complete_Data) %in% row.names(result_down), ]
Nochange_Data <- Complete_Data[row.names(Complete_Data) %in% row.names(result_nochange), ]
return(list(Complete_Data=Complete_Data, Up_Data=Up_Data, Down_Data=Down_Data, Nochange_Data=Nochange_Data))
}
complete_data <- function(result, count, result_up, result_down, result_nochange){
Complete_Data <- merge(count, result, by = 0)
rownames(Complete_Data)=Complete_Data$Row.names
Complete_Data <- subset(Complete_Data, select = -c(Row.names))
Up_Data <- Complete_Data[row.names(Complete_Data) %in% row.names(result_up), ]
Down_Data <- Complete_Data[row.names(Complete_Data) %in% row.names(result_down), ]
Nochange_Data <- Complete_Data[row.names(Complete_Data) %in% row.names(result_nochange), ]
return(list(Complete_Data=Complete_Data, Up_Data=Up_Data, Down_Data=Down_Data, Nochange_Data=Nochange_Data))
}
# Combines the data from Result and Count
# Return complete_data to Complete_Data
Complete_Data <- complete_data(result=Result,
count=Count,
result_up=result_up,
result_down=result_down,
result_nochange=result_nochange)
#' @export
DEG_Data <- function(result, count, result_up, result_down, result_nochange){
Complete_Data <- merge(count, result, by = 0)
rownames(Complete_Data)=Complete_Data$Row.names
Complete_Data <- subset(Complete_Data, select = -c(Row.names))
Up_Data <- Complete_Data[row.names(Complete_Data) %in% row.names(result_up), ]
Down_Data <- Complete_Data[row.names(Complete_Data) %in% row.names(result_down), ]
Nochange_Data <- Complete_Data[row.names(Complete_Data) %in% row.names(result_nochange), ]
return(list(Complete_Data=Complete_Data, Up_Data=Up_Data, Down_Data=Down_Data, Nochange_Data=Nochange_Data))
}
rm(complete_data)
rm(Complete_Data)
#' @export
DEG_data <- function(result, count, result_up, result_down, result_nochange){
Complete_Data <- merge(count, result, by = 0)
rownames(Complete_Data)=Complete_Data$Row.names
Complete_Data <- subset(Complete_Data, select = -c(Row.names))
Up_Data <- Complete_Data[row.names(Complete_Data) %in% row.names(result_up), ]
Down_Data <- Complete_Data[row.names(Complete_Data) %in% row.names(result_down), ]
Nochange_Data <- Complete_Data[row.names(Complete_Data) %in% row.names(result_nochange), ]
return(list(Complete_Data=Complete_Data, Up_Data=Up_Data, Down_Data=Down_Data, Nochange_Data=Nochange_Data))
}
rm(DEG_Data)
#' @export
DEG_data <- function(result, count, result_up, result_down, result_nochange){
Complete_Data <- merge(count, result, by = 0)
rownames(Complete_Data)=Complete_Data$Row.names
Complete_Data <- subset(Complete_Data, select = -c(Row.names))
Up_Data <- Complete_Data[row.names(Complete_Data) %in% row.names(result_up), ]
Down_Data <- Complete_Data[row.names(Complete_Data) %in% row.names(result_down), ]
Nochange_Data <- Complete_Data[row.names(Complete_Data) %in% row.names(result_nochange), ]
return(list(Complete_Data=Complete_Data, Up_Data=Up_Data, Down_Data=Down_Data, Nochange_Data=Nochange_Data))
}
# Combines the data from Result and Count
# Return complete_data to Complete_Data
# To separate the DEG_Data lists run the following
DEG_Data <- DEG_data(result=Result,
count=Count,
result_up=result_up,
result_down=result_down,
result_nochange=result_nochange)
# Combines the data from Result and Count
# Return DEG_data to DEG_Data
# Returns a list of Complete_Data, Up_Data, Down_Data, and Nochange_Data
DEG_Data <- DEG_data(result=Result,
count=Count,
result_up=result_up,
result_down=result_down,
result_nochange=result_nochange)
# To separate the DEG_Data lists run the following
# Return the Complete_Data to Complete_Data
Complete_Data <- (Complete_Data=DEG_Data$Complete_Data)
# Return the Up_Data to Up_Data
Up_Data <-(Up_Data=DEG_Data$Up_Data)
# Return the Down_Data to Down_Data
Down_Data <- (Down_Data=DEG_Data$Down_Data)
# Return the Nochange_Data to Nochange_Data
Nochange_Data <- (Nochange_Data=DEGs$Nochange_Data)
# Return the Nochange_Data to Nochange_Data
Nochange_Data <- (Nochange_Data=DEGs$Nochange_Data)
# Return the Nochange_Data to Nochange_Data
Nochange_Data <- (Nochange_Data=DEG_Data$Nochange_Data)
# If you don't want any subsets use this instead
# DEGs <- volcano_plot(result=Result, pval=0.05, log2FC=1.5)
# to separate the DEG lists run the following
# Return the result_up to result_up
rm(result_up)
# If you don't want any subsets use this instead
# DEGs <- volcano_plot(result=Result, pval=0.05, log2FC=1.5)
# to separate the DEG lists run the following
# Return the result_up to result_up
rm(result_down)
# If you don't want any subsets use this instead
# DEGs <- volcano_plot(result=Result, pval=0.05, log2FC=1.5)
# to separate the DEG lists run the following
# Return the result_up to result_up
result_up <- (result_up=DEGs$result_up)
# Return the result_down to result_down
result_down <-(result_down=DEGs$result_down)
# Return the result_nochange to result_nochange
result_nochange <- (result_nochange=DEGs$result_nochange)
#' @export
GO_geneset_DEG <- function(geneset_file_location, geneset_file_name, Complete_Data, Up_Data, Down_Data, Nochange_Data){
setwd(geneset_file_location)
subset_genes <- read.csv(geneset_file_name, header = F)$V1
subset_genes <- dplyr::distinct(subset_genes)
GO_geneset_Data <- Complete_Data[row.names(Complete_Data) %in% subset_genes, ]
GO_geneset_Up_Data <- GO_geneset_Data[row.names(GO_geneset_Data) %in% row.names(Up_Data), ]
GO_geneset_Down_Data <- GO_geneset_Data[row.names(GO_geneset_Data) %in% row.names(Down_Data), ]
GO_geneset_Nochange_Data <- GO_geneset_Data[row.names(GO_geneset_Data) %in% row.names(Nochange_Data), ]
return(list(GO_geneset_Data=GO_geneset_Data, GO_geneset_Up_Data=GO_geneset_Up_Data, GO_geneset_Down_Data=GO_geneset_Down_Data, GO_geneset_Nochange_Data=GO_geneset_Nochange_Data, subset_genes=subset_genes))
}
#' @export
GO_geneset_DEG <- function(geneset_file_location, geneset_file_name, Complete_Data, Up_Data, Down_Data, Nochange_Data){
setwd(geneset_file_location)
subset_genes <- read.csv(geneset_file_name, header = F)$V1
subset_genes <- dplyr::distinct(subset_genes)
GO_geneset_Data <- Complete_Data[row.names(Complete_Data) %in% subset_genes, ]
GO_geneset_Up_Data <- GO_geneset_Data[row.names(GO_geneset_Data) %in% row.names(Up_Data), ]
GO_geneset_Down_Data <- GO_geneset_Data[row.names(GO_geneset_Data) %in% row.names(Down_Data), ]
GO_geneset_Nochange_Data <- GO_geneset_Data[row.names(GO_geneset_Data) %in% row.names(Nochange_Data), ]
return(list(GO_geneset_Data=GO_geneset_Data, GO_geneset_Up_Data=GO_geneset_Up_Data, GO_geneset_Down_Data=GO_geneset_Down_Data, GO_geneset_Nochange_Data=GO_geneset_Nochange_Data, subset_genes=subset_genes))
}
# Combines the data from Result and Count
# Return GO_geneset_DEG to GO_geneset_DEG
# Returns a list of Complete_Data, Up_Data, Down_Data, and Nochange_Data
GO_geneset_DEG <- GO_geneset_DEG(geneset_file_location="/Users/madhavmakkena/Desktop/RNAseq_Analysis/Amigo_lists/Raw_lists",
geneset_file_name="GO_0005739_mitochondrion.csv",
Complete_Data=Complete_Data,
Up_Data=Up_Data,
Down_Data=Down_Data,
Nochange_Data=Nochange_Data)
#' @export
GO_geneset_DEG <- function(geneset_file_location, geneset_file_name, Complete_Data, Up_Data, Down_Data, Nochange_Data){
setwd(geneset_file_location)
subset_genes <- read.csv(geneset_file_name, header = F)$V1
subset_genes <- dplyr::distinct(subset_genes)
GO_geneset_Data <- Complete_Data[row.names(Complete_Data) %in% subset_genes, ]
GO_geneset_Up_Data <- GO_geneset_Data[row.names(GO_geneset_Data) %in% row.names(Up_Data), ]
GO_geneset_Down_Data <- GO_geneset_Data[row.names(GO_geneset_Data) %in% row.names(Down_Data), ]
GO_geneset_Nochange_Data <- GO_geneset_Data[row.names(GO_geneset_Data) %in% row.names(Nochange_Data), ]
return(list(GO_geneset_Data=GO_geneset_Data, GO_geneset_Up_Data=GO_geneset_Up_Data, GO_geneset_Down_Data=GO_geneset_Down_Data, GO_geneset_Nochange_Data=GO_geneset_Nochange_Data, subset_genes=subset_genes))
}
# Combines the data from Result and Count
# Return GO_geneset_DEG to GO_geneset_DEG
# Returns a list of Complete_Data, Up_Data, Down_Data, and Nochange_Data
GO_geneset_DEG <- GO_geneset_DEG(geneset_file_location="/Users/madhavmakkena/Desktop/RNAseq_Analysis/Amigo_lists/Raw_lists",
geneset_file_name="GO_0005739_mitochondrion.csv",
Complete_Data=Complete_Data,
Up_Data=Up_Data,
Down_Data=Down_Data,
Nochange_Data=Nochange_Data)
#' @export
GO_geneset_DEG <- function(geneset_file_location, geneset_file_name, Complete_Data, Up_Data, Down_Data, Nochange_Data){
setwd(geneset_file_location)
subset_genes <- read.csv(geneset_file_name, header = F)$V1
subset_genes <- dplyr::distinct(c(subset_genes))
GO_geneset_Data <- Complete_Data[row.names(Complete_Data) %in% subset_genes, ]
GO_geneset_Up_Data <- GO_geneset_Data[row.names(GO_geneset_Data) %in% row.names(Up_Data), ]
GO_geneset_Down_Data <- GO_geneset_Data[row.names(GO_geneset_Data) %in% row.names(Down_Data), ]
GO_geneset_Nochange_Data <- GO_geneset_Data[row.names(GO_geneset_Data) %in% row.names(Nochange_Data), ]
return(list(GO_geneset_Data=GO_geneset_Data, GO_geneset_Up_Data=GO_geneset_Up_Data, GO_geneset_Down_Data=GO_geneset_Down_Data, GO_geneset_Nochange_Data=GO_geneset_Nochange_Data, subset_genes=subset_genes))
}
# Combines the data from Result and Count
# Return GO_geneset_DEG to GO_geneset_DEG
# Returns a list of Complete_Data, Up_Data, Down_Data, and Nochange_Data
GO_geneset_DEG <- GO_geneset_DEG(geneset_file_location="/Users/madhavmakkena/Desktop/RNAseq_Analysis/Amigo_lists/Raw_lists",
geneset_file_name="GO_0005739_mitochondrion.csv",
Complete_Data=Complete_Data,
Up_Data=Up_Data,
Down_Data=Down_Data,
Nochange_Data=Nochange_Data)
geneset_file_location="/Users/madhavmakkena/Desktop/RNAseq_Analysis/Amigo_lists/Raw_lists"
geneset_file_name="GO_0005739_mitochondrion.csv"
subset_genes <- read.csv(geneset_file_name, header = F)$V1
subset_genes <- dplyr::distinct(c(subset_genes))
subset_genes <- read.csv(geneset_file_name, header = F)
subset_genes <- dplyr::distinct(c(subset_genes))
subset_genes <- read.csv(geneset_file_name, header = F)
subset_genes <- dplyr::distinct(subset_genes)
#' @export
GO_geneset_DEG <- function(geneset_file_location, geneset_file_name, Complete_Data, Up_Data, Down_Data, Nochange_Data){
setwd(geneset_file_location)
subset_genes <- read.csv(geneset_file_name, header = F)
subset_genes <- dplyr::distinct(subset_genes)
GO_geneset_Data <- Complete_Data[row.names(Complete_Data) %in% subset_genes, ]
GO_geneset_Up_Data <- GO_geneset_Data[row.names(GO_geneset_Data) %in% row.names(Up_Data), ]
GO_geneset_Down_Data <- GO_geneset_Data[row.names(GO_geneset_Data) %in% row.names(Down_Data), ]
GO_geneset_Nochange_Data <- GO_geneset_Data[row.names(GO_geneset_Data) %in% row.names(Nochange_Data), ]
return(list(GO_geneset_Data=GO_geneset_Data, GO_geneset_Up_Data=GO_geneset_Up_Data, GO_geneset_Down_Data=GO_geneset_Down_Data, GO_geneset_Nochange_Data=GO_geneset_Nochange_Data, subset_genes=subset_genes))
}
# Combines the data from Result and Count
# Return GO_geneset_DEG to GO_geneset_DEG
# Returns a list of Complete_Data, Up_Data, Down_Data, and Nochange_Data
GO_geneset_DEG <- GO_geneset_DEG(geneset_file_location="/Users/madhavmakkena/Desktop/RNAseq_Analysis/Amigo_lists/Raw_lists",
geneset_file_name="GO_0005739_mitochondrion.csv",
Complete_Data=Complete_Data,
Up_Data=Up_Data,
Down_Data=Down_Data,
Nochange_Data=Nochange_Data)
# To separate the DEG_Data lists run the following
# Return the subset_genes to subset_genes
subset_genes <- (subset_genes=GO_geneset_DEG$subset_genes)
# Return the GO_geneset_Data to GO_geneset_Data
GO_geneset_Data <- (GO_geneset_Data=GO_geneset_DEG$GO_geneset_Data)
# Return the GO_geneset_Up_Data to GO_geneset_Up_Data
GO_geneset_Up_Data <-(GO_geneset_Up_Data=GO_geneset_DEG$GO_geneset_Up_Data)
# Return the GO_geneset_Down_Data to GO_geneset_Down_Data
GO_geneset_Down_Data <- (GO_geneset_Down_Data=GO_geneset_DEG$GO_geneset_Down_Data)
# Return the GO_geneset_Nochange_Data to GO_geneset_Nochange_Data
GO_geneset_Nochange_Data <- (GO_geneset_Nochange_Data=GO_geneset_DEG$GO_geneset_Nochange_Data)
GO_geneset_Data <- Complete_Data[row.names(Complete_Data) %in% subset_genes, ]
GO_geneset_Data <- Complete_Data[row.names(Complete_Data) %in% c(subset_genes), ]
subset_genes <- c(subset_genes)
subset_genes <- read.csv(geneset_file_name, header = F)
subset_genes <- dplyr::distinct(subset_genes)
subset_genes <- as.character(subset_genes[1,])
subset_genes <- as.character(subset_genes[])
subset_genes <- as.character(subset_genes[,])
subset_genes <- read.csv(geneset_file_name, header = F)
subset_genes <- dplyr::distinct(subset_genes)
test <- as.character(subset_genes[,])
rm(test)
#' @export
GO_geneset_DEG <- function(geneset_file_location, geneset_file_name, Complete_Data, Up_Data, Down_Data, Nochange_Data){
setwd(geneset_file_location)
subset_genes <- read.csv(geneset_file_name, header = F)
subset_genes <- dplyr::distinct(subset_genes)
subset_genes <- as.character(subset_genes[,])
GO_geneset_Data <- Complete_Data[row.names(Complete_Data) %in% c(subset_genes), ]
GO_geneset_Up_Data <- GO_geneset_Data[row.names(GO_geneset_Data) %in% row.names(Up_Data), ]
GO_geneset_Down_Data <- GO_geneset_Data[row.names(GO_geneset_Data) %in% row.names(Down_Data), ]
GO_geneset_Nochange_Data <- GO_geneset_Data[row.names(GO_geneset_Data) %in% row.names(Nochange_Data), ]
return(list(GO_geneset_Data=GO_geneset_Data, GO_geneset_Up_Data=GO_geneset_Up_Data, GO_geneset_Down_Data=GO_geneset_Down_Data, GO_geneset_Nochange_Data=GO_geneset_Nochange_Data, subset_genes=subset_genes))
}
# Combines the data from Result and Count
# Return GO_geneset_DEG to GO_geneset_DEG
# Returns a list of Complete_Data, Up_Data, Down_Data, and Nochange_Data
GO_geneset_DEG <- GO_geneset_DEG(geneset_file_location="/Users/madhavmakkena/Desktop/RNAseq_Analysis/Amigo_lists/Raw_lists",
geneset_file_name="GO_0005739_mitochondrion.csv",
Complete_Data=Complete_Data,
Up_Data=Up_Data,
Down_Data=Down_Data,
Nochange_Data=Nochange_Data)
# To separate the DEG_Data lists run the following
# Return the subset_genes to subset_genes
subset_genes <- (subset_genes=GO_geneset_DEG$subset_genes)
# Return the GO_geneset_Data to GO_geneset_Data
GO_geneset_Data <- (GO_geneset_Data=GO_geneset_DEG$GO_geneset_Data)
# Return the GO_geneset_Up_Data to GO_geneset_Up_Data
GO_geneset_Up_Data <-(GO_geneset_Up_Data=GO_geneset_DEG$GO_geneset_Up_Data)
# Return the GO_geneset_Down_Data to GO_geneset_Down_Data
GO_geneset_Down_Data <- (GO_geneset_Down_Data=GO_geneset_DEG$GO_geneset_Down_Data)
# Return the GO_geneset_Nochange_Data to GO_geneset_Nochange_Data
GO_geneset_Nochange_Data <- (GO_geneset_Nochange_Data=GO_geneset_DEG$GO_geneset_Nochange_Data)
# Checking if the totals add up
all (nrow(GO_geneset_Data) == (nrow(GO_geneset_Up_Data)+nrow(GO_geneset_Down_Data)+nrow(GO_geneset_Nochange_Data)))
# Checking if the totals add up
all (nrow(GO_geneset_DEG$GO_geneset_Data) == (nrow(GO_geneset_DEG$GO_geneset_Up_Data)+nrow(GO_geneset_DEG$GO_geneset_Down_Data)+nrow(GO_geneset_DEG$GO_geneset_Nochange_Data)))
setwd("/Users/madhavmakkena/RNASeqAnalysis")
devtools::document()
devtools::document()
